#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>

namespace enc = sensor_msgs::image_encodings;

static const char WINDOW[] = "Image window";

class ImageConverter
{
  ros::NodeHandle nh_;
  image_transport::ImageTransport it_;
  image_transport::Subscriber image_sub_;
  image_transport::Publisher image_pub_;
  
public:
  ImageConverter()
    : it_(nh_)
  {
    image_pub_ = it_.advertise("out", 1);
    image_sub_ = it_.subscribe("image", 1, &ImageConverter::imageCb, this);
    //image_sub_ = it_.subscribe("image_raw", 1, &ImageConverter::imageCb, this);

    cv::namedWindow(WINDOW);
  }

  ~ImageConverter()
  {
    cv::destroyWindow(WINDOW);
  }

  void imageCb(const sensor_msgs::ImageConstPtr& msg)
  {
    cv_bridge::CvImagePtr cv_ptr;
    try
    {
      cv_ptr = cv_bridge::toCvCopy(msg, enc::BGR8);
    }
    catch (cv_bridge::Exception& e)
    {
      ROS_ERROR("cv_bridge exception: %s", e.what());
      return;
    }

    // set mouse callback
    //cv::setMouseCallback("calibrate", mouse_callback, 0);
    //cv::setMouseCallback("calibrate", mouse_callback, (void*)cv_ptr->image );
    
    // do image processing here
    // OpenCV Mat image is cv_ptr->image

    // convert to HSV
    cv::Mat hsvImg;
    // reduce image size (faster processing, less detail) and apply Gauss blur
    cv::pyrDown(cv_ptr->image, hsvImg);
    
    cvtColor(hsvImg, hsvImg, CV_BGR2HSV,  CV_8U);
    //cvtColor(cv_ptr->image, hsvImg, CV_BGR2HSV,  CV_8U);

    // split channels
    std::vector<cv::Mat> hsv;
    split(hsvImg, hsv);
   
    // pyramid mean shift filtering
    //cv::Mat pyrImg;
    //cv::pyrMeanShiftFiltering(cv_ptr->image, pyrImg, 20, 40, 1);
    //cv::pyrMeanShiftFiltering(hsv[2], pyrImg, 20, 40, 1);

    // ------------------------------------------------------ 
    // try image pyramids (instead) 
    // down
    //cv::pyrDown(cv_ptr->image, pyrImg);
    //cv::pyrDown(pyrImg, pyrImg);
    //cv::pyrDown(pyrImg, pyrImg);
    //cv::pyrDown(pyrImg, pyrImg);
    // up 
    //cv::pyrUp(pyrImg, pyrImg);
    //cv::pyrUp(pyrImg, pyrImg);
    //cv::pyrUp(pyrImg, pyrImg);
    //cv::pyrUp(pyrImg, pyrImg);
    
    // split channels of pyramid image
    //std::vector<cv::Mat> hsv;
    //split(pyrImg, hsv);
    // -----------------------------------------------------------

    // threshold based upon hue channel
    cv::Mat mask;
    cv::Mat mask2;
    // define colors as ranges or with a color radius
    int radius = 15; 
    static const int green = 120;
    static const int purple = 270;
    static const int lightBlue = 200;
    static const int yellow = 45;
    static const int orange = 30;
    
    inRange(hsv[0], green-radius, green+radius, mask);
    inRange(hsv[0], purple-radius, purple+radius, mask2);
    mask |= mask2; // want XOR
    inRange(hsv[0], lightBlue-radius, lightBlue+radius, mask2);
    mask |= mask2;
    inRange(hsv[0], yellow-radius, yellow+radius, mask2);
    mask |= mask2;
    inRange(hsv[0], orange-radius, orange+radius, mask2);
    mask |= mask2;

    // threshold on saturation channel (get rid of low saturation pixels:
    // white/brown)
    cv::Mat satMask;
    inRange(hsv[1], 60, 255,satMask); // yay!!

    // AND mask with saturation channel
    mask &= satMask; // works OK  with current color calibration 
    //mask = satMask.clone();  // TEST!!
    //mask &= hsv[1];

    // apply morphological operations to get rid of noise
    static int dilationElem = cv::MORPH_RECT;
    static cv::Mat structureElem = getStructuringElement(dilationElem, cv::Size(7,7)); 
    morphologyEx(mask, mask, cv::MORPH_OPEN, structureElem);


    // use findContours to filter and blob detected rocks
    std::vector<std::vector<cv::Point> > contours;
    std::vector<cv::Vec4i> hierarchy;

    // running this on mask seems to alter it
    //findContours(mask, contours, hierarchy, CV_RETR_CCOMP, CV_CHAIN_APPROX_SIMPLE); 
    //findContours(satMask, contours, hierarchy, CV_RETR_CCOMP, CV_CHAIN_APPROX_SIMPLE); 
    findContours(mask.clone(), contours, hierarchy, CV_RETR_LIST, CV_CHAIN_APPROX_NONE); 
   
    int numContours = contours.size();
    int MAX_ROCK_SIZE = 1000;
    int MIN_ROCK_SIZE = 100;
    // rock bounding boxes
    std::vector<cv::Rect> detections;  
    // contour area
    double area(0);

    for(int i; i< numContours; ++i)
    {
	 // a contour is an array points
	 area = contourArea(contours[i]);

	 if( area < MAX_ROCK_SIZE && area > MIN_ROCK_SIZE )
	 {	
		cv::Rect rect =  boundingRect(contours[i]);
		detections.push_back( rect );
		// draw rectangle
		cv::rectangle(cv_ptr->image, 2*rect.tl(), 2*rect.br(),  cv::Scalar(0,0,255), 2);
		//cv::drawContours(cv_ptr->image, contours, i, cv::Scalar(0,0,255), 2); 
	 }
    } 	
	    
    // merge results
    merge(hsv, hsvImg);

    // convert back to RGB
    cv::Mat rgbImg; 
    cvtColor(hsvImg, rgbImg , CV_HSV2BGR,  CV_8U);

    // just show colored rocks (RGB mask)
    std::vector<cv::Mat> rgb;
    rgb.push_back(mask);
    rgb.push_back(mask);
    rgb.push_back(mask);
    cv::Mat rgbMask;
    merge(rgb, rgbMask);
    rgbImg &= rgbMask;

    // resize image to original scale
    pyrUp(rgbImg, rgbImg);
 
    //cv::imshow("mask", mask);
    cv::imshow("mask rgb", rgbImg);
    //cv::imshow("sat", satMask);
    //cv::imshow(WINDOW, hsvImg);
    //cv::imshow("detections!", cv_ptr->image);
    cv::waitKey(3);
    
    image_pub_.publish(cv_ptr->toImageMsg());
  }


// ------------------------------
// handle mouse click event

void mouse_callback(int event,int x ,int y,int flags,void* param)
{

    	//cv::imshow("calibrate", cv_ptr->image);
	std::cout<<"X="<<"\t"<<x<<"\t"<<"Y="<<"\t"<<y<<std::endl;
}

};

int main(int argc, char** argv)
{
  ros::init(argc, argv, "image_converter");
  ImageConverter ic;
  ros::spin();
  return 0;
}
